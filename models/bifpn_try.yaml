# parameters
nc: 80  # number of classes
depth_multiple: 0.33  # model depth multiple
width_multiple: 0.50  # layer channel multiple

# anchors
anchors:
  - [10,13, 16,30, 33,23]  # P3/8
  - [30,61, 62,45, 59,119]  # P4/16
  - [116,90, 156,198, 373,326]  # P5/32

# YOLOv5 backbone
backbone:
  # [from, number, module, args]
  [[-1, 1, Focus, [64, 3]],  # 0-P1/2
   [-1, 1, Conv, [128, 3, 2]],  # 1-P2/4
   [-1, 3, BottleneckCSP, [128]],
   [-1, 1, Conv, [256, 3, 2]],  # 3-P3/8
   [-1, 9, BottleneckCSP, [256]],
   [-1, 1, Conv, [512, 3, 2]],  # 5-P4/16
   [-1, 9, BottleneckCSP, [512]],
   [-1, 1, Conv, [1024, 3, 2]],  # 7-P5/32
   [-1, 1, SPP, [1024, [5, 9, 13]]],
   [-1, 3, BottleneckCSP, [1024, False]],  # 9
  ]

# YOLOv5 head
head:
  [[-1, 1, Conv, [512, 1, 1]], 
   [-1, 1, nn.Upsample, [None, 2, 'nearest']], # 11
   [[-1, 6], 1, WeightedMean, [2]],  # arg = no_of_inputs
   [-1, 1, SeparableConv2d, [512]],  # 13

   [-1, 1, Conv, [256, 1, 1]], 
   [-1, 1, nn.Upsample, [None, 2, 'nearest']], #15
   [[-1, 4], 1, WeightedMean, [2]],  
   [-1, 1, SeparableConv2d, [256]],  # 17 

   [-1, 1, Conv, [128,1,1]],
   [-1, 1, nn.Upsample, [None, 2, 'nearest']], #19
   [[-1, 2], 1, WeightedMean, [2]],
   [-1, 1,  SeparableConv2d, [128]],  # 21  => output(optional)

   [-1, 1, Conv, [256, 3, 2]], 
   [[-1, 4, 17], 1, WeightedMean, [3]], #23
   [-1, 1, SeparableConv2d, [256]],  # => output2

   [-1, 1, Conv, [512, 3, 2]], #25
   [[-1, 6, 13], 1, WeightedMean, [3]],
   [-1, 1, SeparableConv2d, [512]],  #27 =>output3

   [-1, 1, Conv, [1024, 3, 2]], 
   [[-1, 9], 1, WeightedMean, [2]], #29
   [-1, 1, SeparableConv2d, [1024]],  # => output4

   [[24,27,30], 1, Detect, [nc, anchors]],  # Detect(P3, P4, P5)
  ]
